#!/bin/bash

FULL=$1
MODE=$2
FILE=${FULL##*/}
EXT=${FILE#*.}

function join(){
	local IFS=';'; echo "$*";
}
function java_main {
	grep -rl --text "main...(\[Ljava/lang/String;)V" . | sed -n 's:.*bin\/\([^$]*\)\.class:\1:p' | tail -1 | tr / .
}

function first_line {
	local LINE=$(head -n 1 "$FULL")

	if [[ $LINE == *"#!"* ]]; then
		chmod +x $FULL; $FULL
		exit; fi
	if [[ $LINE == *">>"* ]]; then
		${LINE#*>>*}
		exit; fi
}
function find_root {
	while [ "$PWD" != "/" ]; do
		if [ -f ".project" ] || [ -d "src" ]; then
			local LINE=$(head -n 1 .project)
			if [[ "$LINE" == "+"* ]]; then
				ARGS=${LINE#+*}
			elif [ -n "$LINE" ]; then
				$LINE
				exit
			fi
			FILE="src/**/*.$EXT"
			OUT="bin/${PWD##*/}"
			return 0
		fi
		cd .. 
	done

	cd "${FULL%/*}"
	OUT="${FILE%%.*}"
}
function compile_ext {
	case $EXT in
	"c" | "h")
		gcc -pedantic -g -std=c11 -O2 -Wall -Wextra -o $OUT $FILE $ARGS ;;
	"scala")
		local LIBRARIES=$(join lib/*.jar "")bin
		scalac -deprecation -feature -unchecked -classpath $LIBRARIES -d bin $FILE ;;
	"java")
		case $MODE in
		"norm")
			javac -d bin $FILE
			jar cfe $OUT.jar $(java_main) bin/* ;;
		"shift")
			ant debug ;;
		esac ;;
	esac
}
function run_ext {
	case $EXT in
	"c" | "h")
		gdb -q --eval-command=run --eval-command=quit $OUT ;;
	"scala")
		local LIBRARIES=$(join lib/*.jar "")bin
		scala -cp $LIBRARIES $(java_main) ;;
	"java")
		case $MODE in
		"norm")
			java -jar $OUT.jar ;;
		"shift")
			adb install -r bin/*-debug.apk
			adb shell am start -a android.intent.action.MAIN -n $ARGS
			adb logcat ;;
		esac ;;
	"js")
		node $FILE ;;
	"jade")
		jade -P $FILE ;;
	*)
		./$OUT ;;
	esac
}

shopt -s nullglob
cd "${FULL%/*}"
clear

first_line
find_root

compile_ext
run_ext
